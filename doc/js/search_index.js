var search_data = {"index":{"searchIndex":["session","sessionclient","delete()","expire()","key?()","new()","prefix()","prefix=()","remove()","restore()","save()","ttl()","value?()"],"longSearchIndex":["session","session::sessionclient","session::sessionclient#delete()","session::sessionclient#expire()","session::sessionclient#key?()","session::sessionclient::new()","session::sessionclient#prefix()","session::sessionclient#prefix=()","session::sessionclient#remove()","session::sessionclient#restore()","session::sessionclient#save()","session::sessionclient#ttl()","session::sessionclient#value?()"],"info":[["Session","","Session.html","","<p>A session module\n"],["Session::SessionClient","","Session/SessionClient.html","","<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">'redis_session'</span>\n<span class=\"ruby-identifier\">session</span> = <span class=\"ruby-constant\">Session</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">SessionClient</span>.<span class=\"ruby-identifier\">new</span>(:<span class=\"ruby-identifier\">prefix</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">'example'</span>, :<span class=\"ruby-identifier\">host</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">'10.0.0.31'</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["delete","Session::SessionClient","Session/SessionClient.html#method-i-delete","(key)","<p>Deleting a key from the session\n<p>key &mdash; The name of the key to be removed\n<p>returns &mdash; true if successful or false …\n"],["expire","Session::SessionClient","Session/SessionClient.html#method-i-expire","(key, ttl)","<p>Set an expire time in seconds to a key. If the key already has an expire\ntime, it reset it to a new time. …\n"],["key?","Session::SessionClient","Session/SessionClient.html#method-i-key-3F","(key)","<p>Check to see if a key exists\n<p>key &mdash; The name of the key to check\n<p>returns &mdash; true if it exists or false otherwise …\n"],["new","Session::SessionClient","Session/SessionClient.html#method-c-new","(options={})","<p>Creates an object of SessionClient\n<p>Parameters\n<p>:host &mdash; the ip address or host name of the redis server default …\n"],["prefix","Session::SessionClient","Session/SessionClient.html#method-i-prefix","()","<p>Getting the prefix name\n<p>returns &mdash; The prefix string\n\n"],["prefix=","Session::SessionClient","Session/SessionClient.html#method-i-prefix-3D","(prefix)","<p>Changing the prefix string _(will not effect existing keys)_\n<p>prefix &mdash; The new prefix to be set\n\n"],["remove","Session::SessionClient","Session/SessionClient.html#method-i-remove","(key)","<p>Deleting a key from the session\n<p>key &mdash; The name of the key to be removed\n<p>returns &mdash; true if successful or false …\n"],["restore","Session::SessionClient","Session/SessionClient.html#method-i-restore","(key, default={})","<p>Restoring a key’s value or providing a default value instead\n<p>key &mdash; The name of the key to restore\n<p>default … &mdash; "],["save","Session::SessionClient","Session/SessionClient.html#method-i-save","(key, value, ttl = nil)","<p>Saving a key with a value\n<p>key &mdash; the name of the key to be saved\n<p>value &mdash; the value to save. Can be any Ruby …\n"],["ttl","Session::SessionClient","Session/SessionClient.html#method-i-ttl","(key)","<p>Examines how much time left to a key in seconds\n<p>key &mdash; The name of a key to check the ttl\n<p>returns &mdash; Returns …\n"],["value?","Session::SessionClient","Session/SessionClient.html#method-i-value-3F","(key)","<p>Check if a key has a value\n<p>key &mdash; The name of the key to check\n<p>returns &mdash; true if exists or false otherwise\n"]]}}